@page "/add"
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@using System.Globalization

<MudPaper Elevation="5" Outlined="true" Style="padding: 10px;" Width="100%">
    <FrequentlyUsed  @bind-Value="Operation.Title"/>
    <EditForm Model="Operation" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <MudStack Row="false" Spacing="3" Justify="Justify.Center">
            <ValidationMessage For="() => Operation.Title" />
            <MudTextField Margin="Margin.Dense" T="string" @bind-Value="Operation.Title" Variant="Variant.Filled" Placeholder="ادخل تفاصيل العملية" />

            <ValidationMessage For="() => Operation.Cost" />
            <MudNumericField Margin="Margin.Dense" T="long" @bind-Value="Operation.Cost" Step="1000" Variant="Variant.Outlined" Culture="@(CultureInfo.GetCultureInfo("ar-sy"))" Format="N0" />
            <div id="ShowAttachments">
                <h1>Hiiiiiiiiiii</h1>
            </div>
            <MudItem Style="align-self: center;">
                <MudIconButton Color="Color.Surface"
                               Icon="@(ShowAttachments ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward)"
                               OnClick="Show" Size="Size.Small" />
            </MudItem>
            <MudButton Color="Color.Success" Variant="Variant.Filled" ButtonType="ButtonType.Submit">حفظ</MudButton>
        </MudStack>
    </EditForm>
</MudPaper>

<script>
    function Test() {
        document.getElementById("ShowAttachments").classList.toggle("Show");
    }


</script>

@code {
    [SupplyParameterFromForm]
    public Operation Operation { get; set; } = new();

    public bool ShowAttachments { get; set; } = false;

    public async Task Show()
    {
        await JS.InvokeVoidAsync("Test");
        ShowAttachments = !ShowAttachments;
    }

    public async Task Submit()
    {
        Snackbar.Add($"{Operation.Title}\n{Operation.Cost}");
    }
}
